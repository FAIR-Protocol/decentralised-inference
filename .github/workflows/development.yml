name: "Development Workflow"

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main", "development" ]
  # schedule:
    # - cron: '41 4 * * 3'

jobs:
  build-and-install-deps:
    name: Build Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Dependencies
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-deps
        with:
          path: ./client/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Could not find cache, Creating
        continue-on-error: true
        run: cd client && npm install
  lint:
    needs: build-and-install-deps
    name: ESLint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
     
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-deps
        with:
          path: ./client/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
      - name: Run ESLint
        run: cd client && npm run lint
  format-check:
    needs: [ build-and-install-deps ]
    name: Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Load Cache
        uses: actions/cache@v3
        env:
          cache-name: cache-deps
        with:
          path: ./client/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
      - name: Run Format Check
        run: cd client && npm run format:check
  build:
    needs: [build-and-install-deps]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Load Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
    - name: Build
      env:
        NODE_OPTIONS: "--max_old_space_size=4096"
      run: cd client && npm run build
    - uses: actions/upload-artifact@v3
      with:
        name: dist-artifact
        path: ./client/dist/
      
  test:
    needs: [build-and-install-deps]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Load Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        path: ./client/node_modules
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
    - name: Test With Coverage
      run: cd client && npm run test:cov
